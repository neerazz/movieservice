<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.neeraj.microservice.movies.movieservice</groupId>
    <artifactId>graphql</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>moviesgraphql</name>
    <description>Spring Boot Project for Movies services using GraphQL</description>

    <properties>
        <java.version>1.8</java.version>
        <app.ip>1003</app.ip>
        <graphql.version>5.0.2</graphql.version>
        <graphql.tool.version>5.2.4</graphql.tool.version>
        <contact.name>Neeraj Kumar Singh</contact.name>
        <contact.email>b.neerajkumarsingh@gmail.com</contact.email>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Adding GraphQL dependencies.-->
        <dependency>
            <groupId>com.graphql-java</groupId>
            <artifactId>graphql-spring-boot-starter</artifactId>
            <version>${graphql.version}</version>
        </dependency>
        <dependency>
            <groupId>com.graphql-java</groupId>
            <artifactId>graphql-java-tools</artifactId>
            <version>${graphql.tool.version}</version>
        </dependency>
        <dependency>
            <groupId>com.graphql-java</groupId>
            <artifactId>graphiql-spring-boot-starter</artifactId>
            <version>${graphql.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>2.3.0</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>

            <!--Adding a plugin to install an image on local docker version.-->
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.27.2</version>
                <configuration>
                    <!-- Commenting out the docker host configuration as teh docker is running in local. -->
                    <!--<dockerHost>tcp://REMOTE_IP:2375</dockerHost> -->
                    <!--<dockerHost>tcp://127.0.0.0:8</dockerHost>-->
                    <verbose>true</verbose>

                    <images>
                        <image>
                            <name>${project.name}:${project.version}</name>
                            <build>

                                <!-- This is the same FROM used in a Dockerfile -->
                                <from>openjdk:8</from>

                                <maintainer>${contact.email}</maintainer>
                                <tags>
                                    <tag>latest</tag>
                                    <tag>${project.version}</tag>
                                </tags>
                                <ports>
                                    <port>${app.ip}</port>
                                </ports>

                                <!-- This is the same ENTRYPOINT used in a Dockerfile -->
                                <entryPoint>
                                    <exec>
                                        <arg>java</arg>
                                        <!-- This extra argument is so Tomcat can start faster due to lack of entropy -->
                                        <!--<arg>-Djava.security.egd=file:/dev/./urandom</arg>-->
                                        <arg>-jar</arg>
                                        <!-- /maven/ is the default dir that the plugin copies your artifact to -->
                                        <arg>/maven/${project.build.finalName}.jar</arg>
                                    </exec>
                                </entryPoint>

                                <!-- This is a predefined assembly.xml that will only copy your final artifact to the Docker image -->
                                <assembly>
                                    <descriptorRef>artifact</descriptorRef>
                                </assembly>
                            </build>
                            <run>

                                <links>
                                    <link>movies-mysql</link>
                                </links>

                                <ports>
                                    <port>${app.ip}:${app.ip}</port>
                                </ports>

                            </run>
                        </image>
                    </images>
                </configuration>

                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <!--<goal>stop</goal>-->
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
